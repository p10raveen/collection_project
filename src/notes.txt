Collection
-----------
1. Collection is a framework.
2. It can be used to achieve all the operations that you perform 
   on a data.
3. which type of operation?
	Searching, insertion, modification, deletion, sorting, etc
4. What do you mean by collection in java aspect? ****
   In java, Collection means a single unit of objects.
   
 --------------------------------
 What is a framework?
 -> Framework means predefined Architecture/structure.
 -> It represent a set of classes and interfaces.
 --------------------------------
5. Hierarchy of collection framework
-> java.util package contains all classes and interfaces.

6. Methods of Collection interface
	
	a. public boolean add()
	b. public boolean addAll()
	c. public boolean remove()
	d. public boolean removeAll()
	e. public boolean retainAll()
	f. public int size()
	g. public void clear()
	h. public boolean contains()
	i. public Iterator iterator()
	j. public boolean isEmpty()
	k. public boolean equals()
----------------------------------------------
Wrapper class
--------------
-> It provides the mechanism to convert primitive data types into object.
-> It introduce in javaSE 5.0.
-> It consist two features autoboxing and unboxing
	
	primitive --convert--> Object  : Autoboxing
	primitive <--convert-- Object  : unboxing 

-> Table
Primitive DT			Wrapper class
--------------------------------------
	boolean				Boolean
	char				Character
	byte				Byte
	short				Short
	int					Integer
	long				Long
	float				Float
	double				Double

-> Example:
	int a = 20;
	Integer i = new Integer(a);
	     or
	Integer i = a;   // autoboxing

-> Example:
	Integer i = new Integer(20);
	int a = i.intValue();
	       or
	int a = i; // unboxing	
	
-> Who is responsible to perform autoboxing and unboxing?
	Ans: Compiler 

------------------------------------------------------------------
List
-----
1. List is an interface.
2. It is a child interface of Collection interface.
3. List can have duplicate values/elements.
4. List uses insertion order.

ArrayList
---------
1. It is an implementation class of List interface.
2. ArrayList can have duplicate values/elements.
3. ArrayList uses insertion order.
4. It is non synchronized.
5. It works same as Array on the basis of indexing.
6. It is used to create a Dynamic Array.
7. How to create an object of ArrayList class.

ArrayList<ref-type> object-name = new ArrayList<ref-type>();
					
					or
					
ArrayList<ref-type> object-name = new ArrayList<>();				

where, ref-type should be Wrapper-classes or any other-classes.

Example:
1. com.list.ArrayListExample1
2. com.list.ArrayListExample2

---------------------------------------------
Iterator interface
-------------------
-> Iterator interface is aka Universal Cursor.
-> It helps in operation like READ.
-> It works only in forward direction.
-> Methods of Iterator interface.
	1. boolean hasNext()
	2. E next()
	3. void remove()

Example:
1. com.list.ArrayListExample3
 

LinkedList class
------------------
1. LinkedList class is an implementation class of List interface.
2. It is work as doubly linked list data structure.
3. LinkedList can have duplicate values/elements.
4. LinkedList uses insertion order.
5. It is non synchronized.
6. Methods of LinkedList class
	1. all methods include that are used in ArrayList class.
	2. void addFirst()
	3. void addLast()
	4. void removeFirst()
	5. void removeLast()
	6. Object clone()
	7. E get(int index)
	8. E getFirst()
	9. E getLast()
	10. int indexOf(E)
	
Example:
1. com.list.LinkedListExample1
2. com.list.LinkedListExample2


ListIterator interface
-------------------
-> It helps in operation like READ.
-> It works in both forward and reverse direction.
-> Methods of ListIterator interface.
	1. boolean hasNext()
	2. E next()
	3. boolean hasPrevious()
	4. E previous()
	5. void remove()

Example:
1. com.list.LinkedListExample3

--------------------------------------------------------------------
Queue interface
----------------
1. It maintains the FIFO (FIRST IN FIRST OUT) manner.
2. Methods of Queue interface:
	1. boolean add()
	2. boolean offer()
	3. Object remove()
	4. Object poll()
	5. Object element()
	6. Object peek()

PriorityQueue class
-------------------
1. Priority Queue is an implementation class of Queue interface.
2. It does not orders the elements in FIFO manner.
3. It inherits AbstractQueue class.

Example:
1. com.queue.PriorityQueueExample1

ArrayDeque class
-------------------
1. Unlink PriorityQueue, we can add or remove elements from both sides.
2. Null elements are not allowed in ArrayDequeue.
3. ArrayDequeue is thread safe.
4. It works on double ended queue data structure.

Example:
1. com.queue.ArrayDequeExample1

Set interface
--------------
1. Set interface is extends Collection interface.
2. Set does not allow duplicate elements.
3. Set does not support insertion order.
4. It has two implementation classes:
	1. HashSet class
	2. TreeSet class
5. Methods of Set interface
	1. boolean add()
	2. boolean remove()
	3. void clear()
	4. boolean contains()
	5. Object clone()
	6. boolean isEmpty()
	7. int size()
	8. Iterator iterator()



HashSet class
-------------
1. HashSet class stores elements by using hashing technique.
2. HashSet contains unique elements.
3. HashSet allow null elements.

Example:
1. com.set.HashSetExample

TreeSet class
-------------
1. TreeSet class stores elements by using Binary Tree technique.
2. TreeSet contains unique elements.
3. TreeSet does not allow null elements.
4. TreeSet maintain the elements in ascending order.

Example:
1. com.set.TestSetExample












 
	
	
	
	
	
	
	
	
	
	
	
	
	













